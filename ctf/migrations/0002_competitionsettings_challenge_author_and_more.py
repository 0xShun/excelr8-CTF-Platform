# Generated by Django 4.2.7 on 2025-08-28 14:05

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('ctf', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompetitionSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competition_name', models.CharField(default='CTF Competition', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Competition description shown on homepage')),
                ('start_time', models.DateTimeField(help_text='When the competition starts')),
                ('end_time', models.DateTimeField(help_text='When the competition ends')),
                ('registration_enabled', models.BooleanField(default=True, help_text='Allow new user registration')),
                ('team_registration_enabled', models.BooleanField(default=True, help_text='Allow team creation')),
                ('max_team_size', models.PositiveIntegerField(default=4, help_text='Maximum members per team')),
                ('freeze_scoreboard', models.BooleanField(default=False, help_text='Freeze scoreboard before competition ends')),
                ('freeze_time', models.DateTimeField(blank=True, help_text='When to freeze scoreboard (optional)', null=True)),
                ('show_scoreboard', models.BooleanField(default=True, help_text='Show scoreboard to participants')),
                ('enable_hints', models.BooleanField(default=True, help_text='Allow hint system')),
                ('dynamic_scoring', models.BooleanField(default=False, help_text='Enable dynamic scoring (experimental)')),
                ('contact_info', models.TextField(blank=True, help_text='Contact information for support')),
                ('logo_url', models.URLField(blank=True, help_text='URL to competition logo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Competition Settings',
                'verbose_name_plural': 'Competition Settings',
            },
        ),
        migrations.AddField(
            model_name='challenge',
            name='author',
            field=models.CharField(blank=True, help_text='Challenge author', max_length=100),
        ),
        migrations.AddField(
            model_name='challenge',
            name='connection_info',
            field=models.TextField(blank=True, help_text='Connection details (host:port, etc)'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='decay_factor',
            field=models.FloatField(default=0.9, help_text='Decay factor for dynamic scoring'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='difficulty',
            field=models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('expert', 'Expert')], default='medium', max_length=10),
        ),
        migrations.AddField(
            model_name='challenge',
            name='initial_value',
            field=models.IntegerField(default=100, help_text='Initial value for dynamic scoring'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='max_attempts',
            field=models.PositiveIntegerField(blank=True, help_text='Maximum attempts allowed (leave blank for unlimited)', null=True),
        ),
        migrations.AddField(
            model_name='challenge',
            name='minimum_value',
            field=models.IntegerField(default=50, help_text='Minimum value for dynamic scoring'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='requirements',
            field=models.ManyToManyField(blank=True, help_text='Challenges that must be solved first', to='ctf.challenge'),
        ),
        migrations.AlterField(
            model_name='challenge',
            name='description',
            field=models.TextField(help_text='Markdown supported'),
        ),
    ]
